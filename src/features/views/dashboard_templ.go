// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"media-server/features/views/template"
	"strconv"
)

type FileEntity struct {
	Id           int
	Originalname string
	Filesize     int64
	CreatedAt    string
}

func Dashboard(files []FileEntity, alerts ...string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n            max-height: 100dvh;\n            overflow-y: hidden;\n        }\n\n        .title {\n            font-size:xx-large;\n            color: #00463d;\n            font-weight: 700;\n            margin-bottom: 1vh;\n                \n            @media (min-width: 769px) {\n              text-align: center;\n            }\n\n            @media (max-width: 768px) and (min-width: 641px) {\n               text-align: center;\n            }\n\n            @media (max-width: 640px) {\n                text-align:start;\n            }\n        }\n\n        .container-upload {\n            width: 100%;\n        }\n\n        .container-card {\n            display: flex;\n            flex-wrap: wrap;\n            flex-direction: row;\n            gap: 1vw;\n            max-height: 70dvh;\n            overflow-y: auto;\n        }\n\n        .card {\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n            text-align: center;\n            padding-bottom: 8px;\n                \n            @media (min-width: 769px) {\n                flex: 23.9%;\n                max-width: 23.9%;\n            }\n\n            @media (max-width: 768px) and (min-width: 641px) {\n                flex: 31.9%;\n                max-width: 31.9%;\n            }\n\n            @media (max-width: 640px) {\n                flex: 48.9%;\n                max-width: 48.9%;\n            }\n\n        }\n\n        .card .card-header {\n            padding: 8px 0px;\n            background: #00463d;\n            font-weight: 600;\n            color: white;\n            font-size: large;\n            border-radius: 8px 8px 0px 0px;\n        }\n\n        .card i {\n            font-size: 40px;\n            color: #007bff;\n        }\n\n        .card h3 {\n            margin: 10px 0;\n        }\n\n        .card button {\n            background-color: #00796b;\n            border: 0px solid white;\n            color: white;\n            border-radius: 3px;\n            padding: 2px 6px;\n            transition: all 0.5s ease;\n        }\n\n        .card button:hover {\n            background-color: #00443c;\n            transform: scale(1.1);\n            cursor: pointer;\n        }\n\n        .upload-button {\n            margin-top: 1vh;\n            background-color: #00796b;\n            color: white;\n            font-weight: 700;\n            transition: all 0.5s ease;\n        }\n\n        .upload-button:hover {\n            background-color: #004d40;\n            cursor: pointer;\n        }\n\n        .popup-download {\n            background-color: white;\n            border: 2px solid #009783;\n            border-radius: 3px;\n            border-radius: 8px 8px 8px 8px;\n            position: absolute;\n            right: 5px;\n            top: 5px;\n            padding: 5px 10px;\n            width: 10vw;\n                \n            @media (min-width: 769px) {\n              width: 20vw;\n            }\n\n            @media (max-width: 768px) and (min-width: 641px) {\n              width: 30vw;\n            }\n\n            @media (max-width: 640px) {\n              width: 40vw;\n            }\n        }\n\n        .popup-download .title-popup {\n            color:#00463d;\n            margin-bottom: 0.5vh;\n        }\n\n        .popup-download .progress-bar {\n            background-color: #00796b;\n            border-radius: 5px;\n            margin-bottom: 0.5vh;\n            width: 0%;\n            height: 5px;\n        }\n\n        .popup-download .value {\n            color:#00463d;\n        }\n        \n    </style><script src=\"/resources/scripts/dashboard.js\"></script><div><div class=\"title\">FILE STORAGE</div><div class=\"popup-download\" id=\"progress-container\" style=\"display: none;\"><div class=\"title-popup\" id=\"progress-title\"></div><div class=\"progress-bar\" id=\"progress-bar\">&nbsp; </div><div class=\"value\" id=\"progress-value\">0% </div></div><div class=\"container-card\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, item := range files {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"card\"><div class=\"card-header\"><div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(item.Originalname)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `features/views/dashboard.templ`, Line: 182, Col: 30}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div></div><p>File Size: ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(
				func() string {
					if item.Filesize == -1 {
						return "File Not Found!"
					}
					if item.Filesize < 1000*1000 {
						return strconv.Itoa(int(item.Filesize/1000)) + "KB"
					}
					return strconv.Itoa(int(item.Filesize/1000/1000)) + "MB"
				}())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `features/views/dashboard.templ`, Line: 194, Col: 31}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</p><p>Created At: ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(item.CreatedAt)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `features/views/dashboard.templ`, Line: 196, Col: 36}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.ComponentScript{Call: "downloadFile('" + item.Originalname + "'," +
				strconv.Itoa(item.Id) + ")"})
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<button onclick=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 templ.ComponentScript = templ.ComponentScript{Call: "downloadFile('" + item.Originalname + "'," +
				strconv.Itoa(item.Id) + ")"}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var5.Call)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\">Download</button> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.ComponentScript{Call: "deleteFile(" + strconv.Itoa(item.Id) + ")"})
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<button onclick=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 templ.ComponentScript = templ.ComponentScript{Call: "deleteFile(" + strconv.Itoa(item.Id) + ")"}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var6.Call)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\">Delete</button></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</div><br><div class=\"container-upload\"><input id=\"file\" name=\"file\" type=\"file\" style=\"width: 95%;\" required><br><input class=\"upload-button\" onclick=\"uploadWithWebsocket()\" value=\"UPLOAD\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, alert := range alerts {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<p style=\"color: red;\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(alert)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `features/views/dashboard.templ`, Line: 214, Col: 33}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func DashboardPage(files []FileEntity, alerts ...string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var9 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = Dashboard(files, alerts...).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = template.Base("Dashboard Page").Render(templ.WithChildren(ctx, templ_7745c5c3_Var9), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
