package views

import (
	"media-server/features/models"
	"media-server/features/views/template"
	"strconv"
)

templ DriveStyles() {
	<link rel="stylesheet" href="assets/extensions/simple-datatables/style.css"/>
}

templ DriveScript() {
	<script src="assets/pages/drive_pages.js"></script>
	<script src="assets/extensions/simple-datatables/umd/simple-datatables.js"></script>
	<script src="assets/static/js/pages/simple-datatables.js"></script>
}

templ DrivePage(files []models.FileMetadata, dirs []models.DirectoryMetadata, directory []string, alerts ...string) {
	@template.BaseAdmin(
		template.BaseEntity{
			Styles:      DriveStyles(),
			Scripts:     DriveScript(),
			Page:        "Drive Page",
			Subtitle:    "",
			Breadcrumbs: directory,
		}) {
		<div>
			for _,alert := range alerts {
				<p style="color: red;">{ alert }</p>
			}
			<section id="input-file-browser">
				<div class="row">
					<div id="uploading-alert" hidden></div>
					<div class="col-md-8">
						<div class="card">
							<div class="card-header">
								<h4 class="card-title">File Upload</h4>
							</div>
							<div class="card-body">
								<div class="row">
									<label for="files" class="form-label">Multiple files input</label>
									<div class="input-group">
										<input class="form-control" type="file" id="files" name="files" multiple/>
										<button class="btn btn-primary" onclick="uploadMultipleFileViaWS()">Upload</button>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="col-md-4">
						<div class="card">
							<div class="card-header">
								<h4 class="card-title">New Directory</h4>
							</div>
							<div class="card-body">
								<div class="row">
									<label for="dir" class="form-label">Must not includes '/'</label>
									<div class="input-group">
										<button class="btn btn-secondary" onclick="goBack()">..</button>
										<input class="form-control" type="text" id="dir" name="dir"/>
										<button class="btn btn-primary" onclick="openFolder()">Open</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</section>
			<section id="tables">
				<div class="card">
					<div class="card-body">
						<table class="table table-striped" id="table1">
							<thead>
								<tr>
									<th></th>
									<th>Name</th>
									<th>Size</th>
									<th>Modified</th>
								</tr>
							</thead>
							<tbody>
								for _,item := range dirs {
									<tr>
										<td>
											<div class="dropdown-toggle me-1" type="button" id="dropdownMenuButtonSec" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
												<i class="bi bi-folder-fill"></i>
											</div>
											<div class="dropdown-menu" aria-labelledby="dropdownMenuButtonSec" data-popper-placement="bottom-start">
												<a href={ templ.SafeURL("drive?dir=" + item.Directory) } class="dropdown-item">
													<i class="bi bi-folder2-open"></i> Open
												</a>
											</div>
										</td>
										<td>{ item.Dirname }</td>
										<td>-</td>
										<td>-</td>
									</tr>
								}
								for _,item := range files {
									<tr>
										<td>
											<div class="dropdown-toggle me-1" type="button" id="dropdownMenuButtonSec" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
												<i class="bi bi-file-fill"></i>
											</div>
											<div class="dropdown-menu" aria-labelledby="dropdownMenuButtonSec" data-popper-placement="bottom-start">
												<div class="dropdown-item">
													<i class="bi bi-hdd-stack"></i> { 
                                                        func ()string{
                                                            if (item.Filesize == -1){
                                                                return "File Not Found!"
                                                            }
                                                            if (item.Filesize < 1000*1000){
                                                                return strconv.Itoa(int(item.Filesize/1000)) + " KB"
                                                            }
                                                            return strconv.Itoa(int(item.Filesize/1000/1000)) + " MB"
                                                        }() }
												</div>
												<button class="dropdown-item">
													<i class="bi bi-envelope-open-fill"></i> Open
												</button>
												<button
													onclick={ templ.ComponentScript{Call: "downloadFile('" + item.Filename + "','" + item.FileId + "')"} }
													class="dropdown-item"
												>
													<i class="bi bi-cloud-download-fill"></i> Download
												</button>
												<button
													onclick={ templ.ComponentScript{Call: "deleteFile('" + item.FileId + "')"} }
													class="dropdown-item"
												>
													<i class="bi bi-trash-fill"></i> Delete
												</button>
											</div>
										</td>
										<td>{ item.Filename }</td>
										<td>
											{ func ()string{
                                                if (item.Filesize == -1){
                                                    return "File Not Found!"
                                                }
                                                if (item.Filesize < 1000*1000){
                                                    return strconv.Itoa(int(item.Filesize/1000)) + " KB"
                                                }
                                                return strconv.Itoa(int(item.Filesize/1000/1000)) + " MB"
                                            }() }
										</td>
										<td>{ item.UpdatedAt }</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</section>
		</div>
	}
}
